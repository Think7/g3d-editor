#extension GL_EXT_gpu_shader4 : enable

uniform vec4 cell_colors[12];
uniform int block_data[64];
uniform int cell_positions[64];
uniform int cell_data;
uniform vec2 block_position;
uniform int block_type;

varying vec2 texCoord;

void mapTexCoord(int nswe)
{
   if (gl_MultiTexCoord0.s != 0.0)
   {
      float u1 = float(nswe / 4) * 0.25;
      float v1 = float(nswe - ((nswe / 4) * 4)) * 0.25;
      
      if (gl_MultiTexCoord0.s == 0.1)
      {
         texCoord.s = u1;
      }
      else
      {
         texCoord.s = u1 + 0.25;
      }
   
      if (gl_MultiTexCoord0.t == 0.3)
      {
         texCoord.t = v1;
      }
      else
      {
         texCoord.t = v1 + 0.25;
      }
   }
   else
   {
      texCoord.s = 0.0;
      texCoord.t = 0.0;
   }
}

void maybeMakeDarker()
{
   int bx = int(block_position.x) >> 3;
   int by = int(block_position.y) >> 3;
   bx = bx - ((bx / 256) * 256);
   by = by - ((by / 256) * 256);
   if ((bx - ((bx / 2) * 2)) != (by - ((by / 2) * 2)))
   {
      gl_FrontColor.r *= 0.85;
      gl_FrontColor.g *= 0.85;
      gl_FrontColor.b *= 0.85;
   }
}

void main(void) 
{
   vec4 pos = gl_Vertex;
   int state;
   int height;
   
   if (block_type == 2)
   {
      int x = int(pos.x);
      int y = int(pos.z);
      int index = x * 8 + y;
      int data = block_data[index];
      int nswe = data >> 3 & 15;
      state = data >> 1 & 3;
      height = (data >> 3 & -16) >> 1;
      
      if ((data & 1) == 1)
         gl_FrontColor = cell_colors[block_type * 3 + state + 3];
      else
         gl_FrontColor = cell_colors[block_type * 3 + state];
      
      maybeMakeDarker();
      mapTexCoord(nswe);
      
      int position = cell_positions[index];
      pos.x -= float(x);
      pos.z -= float(y);
      pos.x = pos.x + block_position.x + float(position & 65535);
      pos.z = pos.z + block_position.y + float(position >> 16 & 65535);
   }
   else if (block_type == 1)
   {
      int x = int(pos.x);
      int y = int(pos.z);
      int index = x * 8 + y;
      int data = block_data[index];
      int nswe = data >> 3 & 15;
      
      state = data >> 1 & 3;
      height = (data >> 3 & -16) >> 1;
      gl_FrontColor = cell_colors[block_type * 3 + state];
      maybeMakeDarker();
      mapTexCoord(nswe);
      
      pos.x += block_position.x;
      pos.z += block_position.y;
   }
   else
   {
      state = cell_data >> 1 & 3;
      height = cell_data >> 3;
      
      gl_FrontColor = cell_colors[block_type * 3 + state];
      texCoord = vec2(gl_MultiTexCoord0);
      
      pos.x += block_position.x;
      pos.z += block_position.y;
   }
   
   pos.y += float(height) / 16.0;
   
   gl_Position = gl_ModelViewProjectionMatrix * pos;
}